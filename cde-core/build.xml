<!--===========================================================================
  This is the build file for the Community Dashboard Framework Plugin project.

  This build file will use the subfloor.xml file as the default build
  process and should only override the tasks that need to differ from
  the common build file.

  See subfloor.xml for more details
============================================================================-->
<project name="Community Dashboard Editor" basedir="." default="jar"
         xmlns:ivy="antlib:org.apache.ivy.ant">

  <description>
    This build file is used to create the CDE project
    and works with the subfloor.xml file.
  </description>


  <property file="../override.properties"
            description="Top level Properties customized for your development environment belong in this file.  This file will never be checked into the SCM." />
  <property file="../build.properties"
            description="Top level Properties customized for your particular project belong in this file." />

  <property name="js.karma.config" value="karma.conf.js"/>

  <!-- Import subfloor.xml which contains all the default tasks -->
  <import file="../build-res/subfloor.xml"/>
  <import file="../build-res/subfloor-js.xml"/>

  <!--
      AS STATED ABOVE, THE ONLY TASKS THAT SHOULD EXIST IN THIS BUILD FILE ARE
      THE TASKS THAT NEED TO DIFFER FROM THE DEFAULT IMPLEMENTATION OF THE TASKS
      FOUND IN subfloor.xml.
    -->

<!--
  <target name='dist-solution'>
    <copy todir="${solution.stage.dir}" overwrite='true'>
      <fileset dir='solution'>
      <include name=''>
    </copy>
  </target>
-->
    <mkdir dir="${js.module.script.dir}"/>
    <mkdir dir="${js.module.script.agg.dir}"/>



  <target name="compile.compile" depends="init, resolve" description="Performs the actual javac compile">
    <javac destdir="${classes.dir}"
           debug="${javac.debug}"
           deprecation="${javac.deprecation}"
           fork="true"
           source="${javac.source}"
           target="${javac.target}">
      <classpath>
        <path refid="classpath"/>
        <fileset dir="runtime-lib">
          <include name="**/*.jar" />
        </fileset>

      </classpath>
      <src path="${src.dir}"/>
    </javac>
  </target>




  <property name="plugin.name"
            value="pentaho-cdf-dd"
            description="Name of the plugin"/>

  <property name="resource.dir"
            value="resources"
            description="Name of the resource directory"/>

  <property name="stage.dir"
            value="${bin.dir}/stage"
            description="Name of the resource directory"/>

  <property name="samples.stage.dir"
            value="${bin.dir}/stage-samples"
            description="Name of the resource directory" />
  <property name="runtimelib.dir"
            value="${basedir}/runtime-lib"
            description="Directory that hosts Jar files required to run project source.  (IVY will populate this directory with required jars)" />

  <property name="testresources.dir" value="${basedir}/test-resources" description="Directory that hosts the test resources files" />

  <tstamp/>


  <echo>project.revision = ${project.revision}</echo>


 <!-- Overriding resolve target so we can add resolve-dev -->
  <target name="resolve"
          depends="resolve-default, resolve-test, resolve-runtime, ivy.check-releasable"
          description="Retrieves all the dependent libraries" />


  <target name="resolve-runtime" depends="resolve-init">
    <ivy:resolve file="ivy.xml" conf="runtime" />
    <ivy:retrieve conf="runtime" pattern="${runtimelib.dir}/[module]-[revision](-[classifier]).[ext]" />
  </target>
	
	
	<!-- OVERRIDES -->
	<target name="continuous" depends="subfloor.continuous, test-js"/>

	  <target name="publish-nojar.internal" depends="install-antcontrib,create-pom,ivy.deliver">
	    <antcall target="maven-publish-dependencies">
	      <param name="publish.groupId" value="${ivy.artifact.group}" />
	      <param name="publish.artifactId" value="${ivy.artifact.id}" />
	      <param name="publish.version" value="${project.revision}" />
	      <param name="publish.file" value="${ivy.artifact.ivypathname}" />
	    </antcall>

	    <if>
	      <equals arg1="${source.publish}" arg2="true" />
	        <then>
	          <antcall target="maven-publish-sources">
	            <param name="publish.groupId" value="${ivy.artifact.group}" />
	            <param name="publish.artifactId" value="${ivy.artifact.id}" />
	            <param name="publish.version" value="${project.revision}" />
	            <param name="publish.file" value="${dist.dir}/${ivy.artifact.id}-${project.revision}-sources.jar" />
	          </antcall>
	        </then>
	    </if>

	    <if>
	      <equals arg1="${tests.publish}" arg2="true" />
	      <then>
		    <antcall target="maven-publish-artifact">
	          <param name="publish.groupId" value="${ivy.artifact.group}" />
	          <param name="publish.artifactId" value="${ivy.artifact.id}" />
	          <param name="publish.version" value="${project.revision}" />
		      <param name="publish.file" value="${dist.dir}/${ivy.artifact.id}-${project.revision}.jar" />
		    </antcall>
	      </then>
	      <else>
		    <antcall target="maven-publish-artifact">
		      <param name="publish.pomFile" value="${ivy.artifact.pomfile}" />
		      <param name="publish.file" value="${dist.dir}/${ivy.artifact.id}-${project.revision}.jar" />
		    </antcall>
	      </else>
	    </if>

	    <antcall target="maven-publish.post"/>
	    
	  </target>
	
	
	  <target name="maven-publish-artifact" depends="install-antcontrib">
	    <if>
	      <equals arg1="${tests.publish}" arg2="true" />
	      <then>
			    <sequential>
			      <fail message="No file found at: ${publish.file}">
			        <condition>
			          <not>
			            <available file="${publish.file}" />
			          </not>
			        </condition>
			      </fail>
			      <echo message="Publishing ${publish.file} to ${ivy.repository.publish}..." />
			      <if>
			        <isset property="isWindows" />
			        <then>
			          <exec executable="cmd" failonerror="true">
			            <arg value="/c" />
			            <arg value="mvn.bat" />
			            <arg value="deploy:deploy-file" />
			            <arg value="-DrepositoryId=${ivy.repository.id}" />
			            <arg value="-Durl=${ivy.repository.publish}" />
			            <arg value="-DgroupId=${publish.groupId}" />
			            <arg value="-DartifactId=${publish.artifactId}" />
			            <arg value="-Dversion=${publish.version}" />
			            <arg value="-DgeneratePom=true" />
			            <arg value="-Dfile=${publish.file}" />
			          </exec>
			        </then>
			        <else>
			          <exec executable="mvn" failonerror="true">
			            <arg value="deploy:deploy-file" />
			            <arg value="-DrepositoryId=${ivy.repository.id}" />
			            <arg value="-Durl=${ivy.repository.publish}" />
			            <arg value="-DgroupId=${publish.groupId}" />
			            <arg value="-DartifactId=${publish.artifactId}" />
			            <arg value="-Dversion=${publish.version}" />
			            <arg value="-DgeneratePom=true" />
			            <arg value="-Dfile=${publish.file}" />
			          </exec>
			        </else>
			      </if>
			    </sequential>
	      </then>
	      <else>
			    <sequential>
			      <fail message="No file found at: ${publish.file}">
			        <condition>
			          <not>
			            <available file="${publish.file}" />
			          </not>
			        </condition>
			      </fail>
			      <echo message="Publishing ${publish.file} to ${ivy.repository.publish}..." />
			      <if>
			        <isset property="isWindows" />
			        <then>
			          <exec executable="cmd" failonerror="true">
			            <arg value="/c" />
			            <arg value="mvn.bat" />
			            <arg value="deploy:deploy-file" />
			            <arg value="-DrepositoryId=${ivy.repository.id}" />
			            <arg value="-Durl=${ivy.repository.publish}" />
			            <arg value="-DpomFile=${publish.pomFile}" />
			            <arg value="-Dfile=${publish.file}" />
			          </exec>
			        </then>
			        <else>
			          <exec executable="mvn" failonerror="true">
			            <arg value="deploy:deploy-file" />
			            <arg value="-DrepositoryId=${ivy.repository.id}" />
			            <arg value="-Durl=${ivy.repository.publish}" />
			            <arg value="-DpomFile=${publish.pomFile}" />
			            <arg value="-Dfile=${publish.file}" />
			          </exec>
			        </else>
			      </if>
			    </sequential>
	       </else>
	    </if>
	  </target>
	
	

</project>
