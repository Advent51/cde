<!--===========================================================================
  This is the build file for the Community Dashboard Framework Plugin project.

  This build file will use the subfloor.xml file as the default build
  process and should only override the tasks that need to differ from
  the common build file.

  See subfloor.xml for more details
============================================================================-->
<project name="Community Dashboard Editor" basedir="." default="dist"
         xmlns:ivy="antlib:org.apache.ivy.ant">

    <description>
        This build file is used to create the Dashboard Designer project
        and works with the subfloor.xml file.
    </description>


    <taskdef uri="antlib:org.sonar.ant" resource="org/sonar/ant/antlib.xml">
        <classpath path="sonar-ant-task-1.3.jar"/>
    </taskdef>

    <!-- Import the subfloor.xml file which contains all the default tasks -->
    <import file="build-res/subfloor.xml"/>

    <!--
        AS STATED ABOVE, THE ONLY TASKS THAT SHOULD EXIST IN THIS BUILD FILE ARE
        THE TASKS THAT NEED TO DIFFER FROM THE DEFAULT IMPLEMENTATION OF THE TASKS
        FOUND IN subfloor.xml.
      -->

    <!-- Global properties -->
    <property name='pentaho-base.dir' value='../cde-pentaho-base' description="Name of pentaho base dir"/>
    <property name='core.dir' value ='../cde-core' description="Name of core dir"/>
    <property name="plugin.name" value="pentaho-cdf-dd" description="Name of the plugin"/>
    <property name="resource.dir" value="resource" description="Name of the resource directory"/>
    <property name="includes.name" value="includes.properties"/>
    <property name="stage.dir" value="${bin.dir}/stage" description="Name of the resource directory"/>
    <property name="solution.stage.dir" value="${bin.dir}/stage-solution" description="Name of the resource directory"/>

    <!-- Resources location -->
    <property name='core-resource.dir' value='${core.dir}/${resource.dir}'/>
    <property name='pentaho-base-resource.dir' value='${pentaho-base.dir}/${resource.dir}'/>
    <!-- Extra Source Dir Locations -->
    <property name='pentaho-base-src.dir' value='${pentaho-base.dir}/src'/>
    <!-- Properties for includes -->
    <property file='${core-resource.dir}/${includes.name}'/>
    <property file='${pentaho-base-resource.dir}/${includes.name}'/>
    <property file='${resource.dir}/${includes.name}'/>
    <property name='includes.path' value='${stage.dir}/${plugin.name}/${includes.name}'/>

    <target name="compile.compile" depends="init" description="Performs the actual javac compile">
        <javac destdir="${classes.dir}"
               debug="${javac.debug}"
               deprecation="${javac.deprecation}"
               fork="true"
               source="${javac.source}"
               target="${javac.target}">
            <classpath>
                <path refid="classpath"/>
                <fileset dir="runtime-lib">
                    <include name="**/*.jar"/>
                </fileset>
            </classpath>
            <src path="${src.dir}"/>
            <src path="../cde-pentaho-base/src"/>
        </javac>
    </target>

    <tstamp/>

    <!-- Build the project.revision property -->
    <property name="distribution.version" value="${project.stage}-${project.version}"/>

    <echo>distribution.version = ${distribution.version}</echo>

    <target name="dist" depends="clean, resolve,jar,dist-plugin,write-properties,write-patches,dist-solution"/>
    <target name="dist-compile" depends="jar,dist-plugin"/>

    <property name="plugin.artifact.id" value="${plugin.name}"/>
    <property name="plugin.zipfile" value="${plugin.artifact.id}-${distribution.version}.zip"/>
    <property name="plugin.solution.zipfile" value="${plugin.artifact.id}-solution-${distribution.version}.zip"/>

    <target name="check-sonar-props">
        <available file="/home/tomcat/sonar.properties" property="sonar.props"/>
        <echo>${sonar.props}</echo>
    </target>

    <target name="read-sonar-props" depends="check-sonar-props" if="sonar.props">
        <echo>Prop file exists</echo>
        <loadproperties srcFile="/home/tomcat/sonar.properties"/>
    </target>

    <target name="sonar" depends='read-sonar-props'>
        <!-- list of mandatories Sonar properties -->
        <property name="sonar.sources" value="${src.dir}"/>
        <!-- list of optional Sonar properties -->
        <property name="sonar.binaries" value="${classes.dir}"/>
        <sonar:sonar key="pt.webdetails:CDE" version="${distribution.version}" xmlns:sonar="antlib:org.sonar.ant"/>
    </target>

    <target name="sonar-js" depends="read-sonar-props">
        <property name="sonar.language" value="js"/>
        <property name="sonar.dynamicAnalysis" value="false"/>
        <property name="sonar.sources" value="${resource.dir}/js"/>
        <sonar:sonar key="pt.webdetails:CDE-js" version="${distribution.version}" xmlns:sonar="antlib:org.sonar.ant"/>
    </target>

    <!-- Overriding resolve target so we can add resolve-dev -->
    <target name="resolve"
            depends="resolve-default, resolve-test, resolve-runtime, ivy.check-releasable"
            description="Retrieves all the dependent libraries"/>

    <target name="resolve-runtime" depends="resolve-init">
        <ivy:resolve file="ivy.xml" conf="runtime"/>
        <ivy:retrieve conf="runtime" pattern="runtime-lib/[module]-[revision](-[classifier]).[ext]"/>
    </target>


    <!--=======================================================================
  dist

  Creates a distribution of this project's plugin zip
  ====================================================================-->
    <target name="dist-plugin" depends="jar" description="Creates a distribution">
        <!-- Make dirs-->
        <mkdir dir="${stage.dir}"/>
        <mkdir dir="${stage.dir}/${plugin.name}"/>
        <mkdir dir="${stage.dir}/${plugin.name}/lib"/>

        <!-- Copy core resources -->
        <copy todir='${stage.dir}/${plugin.name}'>
            <fileset dir='${core-resource.dir}'>
                <exclude name="${includes.name}"/>
            </fileset>
        </copy>

        <!-- Copy pentaho-base resources -->
        <copy todir='${stage.dir}/${plugin.name}' overwrite='true'>
            <fileset dir='${pentaho-base-resource.dir}'>
                <exclude name="${includes.name}"/>
            </fileset>

        </copy>

        <!-- Copy pentaho resources -->
        <copy todir='${stage.dir}/${plugin.name}' overwrite='true'>
            <fileset dir='${resource.dir}'>
                <exclude name="${includes.name}"/>
            </fileset>
        </copy>


        <!-- copy the plugin jar to the plugin dist lib folder -->
        <copy todir="${stage.dir}/${plugin.name}/lib" overwrite="true">
            <fileset dir="${dist.dir}">
                <include name="${ivy.artifact.id}-${project.revision}.jar"/>
            </fileset>
            <fileset dir="${devlib.dir}">
                <include name="**/*.jar"/>
            </fileset>
            <fileset dir="runtime-lib">
                <include name="cpf-*.jar"/>
                <include name="cde-*.jar"/>

                <!-- PTEIXEIRA, 10-09-2013, decurring of cde core-refactor -->
                <!-- not happy with this, could use some re-thinking -->
                <include name="json-*.jar"/>
                <include name="ezmorph-*.jar"/>
            </fileset>
        </copy>


        <!-- create the version file -->
        <tstamp/>
        <property name="sequential.build.id" value="manual-${DSTAMP}"/>
        <echo file="${stage.dir}/${plugin.name}/version.xml"
              message="&lt;version branch='TRUNK'  buildId='${sequential.build.id}'>${distribution.version}&lt;/version>"/>


        <copy todir="${stage.dir}/${plugin.name}" overwrite="true">
            <fileset dir="${basedir}">
                <include name="readme.txt"/>
            </fileset>
        </copy>

        <!-- create a zip file -->
        <zip zipfile="${dist.dir}/${plugin.zipfile}"
             basedir="${stage.dir}"
             includes="${plugin.artifact.id}/**/*"
             excludes="**/Thumbs.db"/>


        <echo file="${dist.dir}/marketplace.xml">&lt;version>
            &lt;branch>TRUNK&lt;/branch>
            &lt;version>${distribution.version}&lt;/version>
            &lt;name>Trunk&lt;/name>
            &lt;package_url>
            http://ci.analytical-labs.com/job/Webdetails-CDE/lastSuccessfulBuild/artifact/server/plugin/dist/pentaho-cdf-dd-TRUNK-SNAPSHOT.zip
            &lt;/package_url>
            &lt;samples_url>http://ci.analytical-labs.com/job/Webdetails-CDE/lastSuccessfulBuild/artifact/server/plugin/dist/pentaho-cdf-dd-solution-TRUNK-SNAPSHOT.zip
            &lt;/samples_url>
            &lt;description>Trunk Snapshot. Get the latest, edgy, still work in progress features here....&lt;/description>
            &lt;build_id>${sequential.build.id}&lt;/build_id>
            &lt;/version>
        </echo>


    </target>


    <target name="dist-solution" depends="init">

        <mkdir dir="${solution.stage.dir}"/>

        <!-- copy over all the xactions within the cdf folder -->
        <copy todir="${solution.stage.dir}" overwrite="true">
            <fileset dir="./solution">
                <include name="pentaho-cdf-dd/**/*"/>
            </fileset>
        </copy>

        <zip zipfile="${dist.dir}/${plugin.solution.zipfile}"
             basedir="${solution.stage.dir}"
             includes="**/*"
             excludes="**/Thumbs.db"
                />


    </target>


    <!--=======================================================================
          install-plugin

          Installs the plugin locally
          ====================================================================-->
    <target name="install-plugin" depends="dist" description="Installs the plugin locally">

        <fail message="plugin.local.install.solutions.dir not set - cannot copy"
              unless="plugin.local.install.solutions.dir"/>

        <delete dir="${plugin.local.install.solutions.dir}/system/${plugin.name}"/>
        <copy todir="${plugin.local.install.solutions.dir}/system/${plugin.name}">
            <fileset dir="${stage.dir}/${plugin.name}">
                <include name="**/*"/>
            </fileset>
        </copy>

        <!-- Copy solution -->
        <copy todir="${plugin.local.install.solutions.dir}/plugin-samples">
            <fileset dir="${solution.stage.dir}/">
                <include name="**/*"/>
            </fileset>
        </copy>

        <get src="http://127.0.0.1:8080/pentaho/Publish?publish=now&amp;class=org.pentaho.platform.plugin.services.pluginmgr.PluginAdapter&amp;userid=${plugin.local.install.user}&amp;password=${plugin.local.install.pass}"
             dest="${stage.dir}/blah.html"/>

    </target>


    <!--=======================================================================
        publish-pentaho-nojar (override)

        Publishes the jar and plugin zip package to the Maven repository
        ====================================================================-->
    <target name="publish-pentaho-nojar"
            depends="install-antcontrib,create-pom,ivy.deliver">
        <ant antfile="build-res/subfloor.xml" target="publish-pentaho-nojar"/>

        <ivy:makepom ivyfile="package-ivy.xml" pomfile="plugin-pom.xml"/>
        <ivy:makepom ivyfile="package-ivy.xml" pomfile="solution-pom.xml"/>

        <replace file="plugin-pom.xml" token="jar" value="zip"/>
        <replace file="plugin-pom.xml" token="%artifact-name%" value="${plugin.artifact.id}"/>
        <antcall target="maven-publish-artifact">
            <param name="publish.pomFile" value="plugin-pom.xml"/>
            <param name="publish.file" value="${dist.dir}/${plugin.zipfile}"/>
        </antcall>


        <replace file="solution-pom.xml" token="jar" value="zip"/>
        <replace file="solution-pom.xml" token="%artifact-name%" value="${plugin.artifact.id}-solution"/>
        <antcall target="maven-publish-artifact">
            <param name="publish.pomFile" value="solution-pom.xml"/>
            <param name="publish.file" value="${dist.dir}/${plugin.solution.zipfile}"/>
        </antcall>
    </target>

    <target name="write-properties">
        <!-- Create includes.properties -->
        <echo file="${stage.dir}/${plugin.name}/${includes.name}"/>
        <for list='${core-scripts}' param='filename'>
            <sequential>
                <propertyfile file="${includes.path}">
                    <entry key="scripts" operation="+" value="@{filename}," />
                </propertyfile>
            </sequential>
        </for>
        <for list='${pentaho-base-scripts}' param='filename'>
            <sequential>
                <propertyfile file="${includes.path}">
                    <entry key="scripts" operation="+" value="@{filename}," />
                </propertyfile>
            </sequential>
        </for>
        <for list='${pentaho-scripts}' param='filename'>
            <sequential>
                <propertyfile file="${includes.path}">
                    <entry key="scripts" operation="+" value="@{filename}," />
                </propertyfile>
            </sequential>
        </for>

        <for list='${core-styles}' param='filename'>
            <sequential>
                <propertyfile file="${includes.path}">
                    <entry key="styles" operation="+" value="@{filename}," />
                </propertyfile>
            </sequential>
        </for>
        <for list='${pentaho-base-styles}' param='filename'>
            <sequential>
                <propertyfile file="${includes.path}">
                    <entry key="styles" operation="+" value="@{filename}," />
                </propertyfile>
            </sequential>
        </for>
        <for list='${pentaho-styles}' param='filename'>
            <sequential>
                <propertyfile file="${includes.path}">
                    <entry key="styles" operation="+" value="@{filename}," />
                </propertyfile>
            </sequential>
        </for>
    </target>

    <target name='write-patches'>
        <property name="scripts.patch" value="${stage.dir}/${plugin.name}/resources/scripts.html"/>
        <property name="styles.patch" value="${stage.dir}/${plugin.name}/resources/styles.html"/>
        <property file="${includes.path}"/>

        <echo file='${scripts.patch}' append='false'/>
        <for list='${scripts}' param='filename'>
            <sequential>
                <echo file='${scripts.patch}' append='true'>&lt;script language="javascript" type="text/javascript"
                    src="@{filename}"/&gt;&lt;/script&gt;&#13;&#10;</echo>
            </sequential>
        </for>

        <echo file='${styles.patch}' append='false'/>
        <for list='${styles}' param='filename'>
            <sequential>
                <echo file='${styles.patch}' append='true'>&lt;link href="@{filename}" rel="stylesheet" type="text/css"/&gt;&#13;&#10;</echo>
            </sequential>
        </for>
    </target>
</project>
