{
 "layout": {
  "title": "CDF - Sample structure",
  "rows": [
   {
    "id": "55291303-7ccc-8404-9694-82a427f612a8",
    "type": "LayoutResourceCode",
    "typeDesc": "Resource",
    "parent": "UnIqEiD",
    "properties": [
     {
      "name": "name",
      "value": "AddInDefaults",
      "type": "Id"
     },
     {
      "name": "resourceType",
      "value": "Javascript",
      "type": "Label"
     },
     {
      "name": "resourceCode",
      "value": "Dashboards.setAddInDefaults(\"Table\",\"colType\",\"sparkline\",\n{\n    fillColor:\"#aaaaaa\",\n    width: \"150\"\n}\n); ",
      "type": "Resource"
     }
    ]
   },
   {
    "id": "03a83220-159d-d841-c40d-0a04044f3e51",
    "type": "LayoutResourceFile",
    "typeDesc": "Resource",
    "parent": "UnIqEiD",
    "properties": [
     {
      "name": "name",
      "value": "css",
      "type": "Id"
     },
     {
      "name": "resourceType",
      "value": "Css",
      "type": "Label"
     },
     {
      "name": "resourceFile",
      "value": "${res:../cdeReference.css}",
      "type": "ResourceFile"
     }
    ]
   },
   {
    "id": "7746f3c7-ccfb-9cba-b7cd-f5dae17d6a63",
    "type": "LayoutRow",
    "typeDesc": "Row",
    "parent": "UnIqEiD",
    "properties": [
     {
      "name": "name",
      "value": "",
      "type": "Id"
     },
     {
      "name": "height",
      "value": "20",
      "type": "Integer"
     },
     {
      "name": "backgroundColor",
      "value": "",
      "type": "Color"
     },
     {
      "name": "roundCorners",
      "value": "",
      "type": "RoundCorners"
     },
     {
      "name": "cssClass",
      "value": "",
      "type": "String"
     },
     {
      "name": "textAlign",
      "value": "",
      "type": "TextAlign"
     }
    ]
   },
   {
    "id": "23974863-0f28-ff9c-62f8-30c632ba973d",
    "type": "LayoutRow",
    "typeDesc": "Row",
    "parent": "UnIqEiD",
    "properties": [
     {
      "name": "name",
      "value": "Title",
      "type": "Id"
     },
     {
      "name": "height",
      "value": "",
      "type": "Integer"
     },
     {
      "name": "backgroundColor",
      "value": "",
      "type": "Color"
     },
     {
      "name": "roundCorners",
      "value": "",
      "type": "RoundCorners"
     },
     {
      "name": "cssClass",
      "value": "WDheader",
      "type": "String"
     },
     {
      "name": "textAlign",
      "value": "",
      "type": "TextAlign"
     }
    ]
   },
   {
    "id": "9e153dff-b071-01a0-54dd-3666a857debe",
    "type": "LayoutHtml",
    "typeDesc": "Html",
    "parent": "23974863-0f28-ff9c-62f8-30c632ba973d",
    "properties": [
     {
      "name": "name",
      "value": "",
      "type": "Id"
     },
     {
      "name": "html",
      "value": "AddIns reference ",
      "type": "Html"
     },
     {
      "name": "color",
      "value": "",
      "type": "Color"
     },
     {
      "name": "fontSize",
      "value": "18",
      "type": "Integer"
     },
     {
      "name": "cssClass",
      "value": "",
      "type": "String"
     }
    ]
   },
   {
    "id": "2d99f333-9735-6b03-85d5-93d4a0142d07",
    "type": "LayoutRow",
    "typeDesc": "Row",
    "parent": "UnIqEiD",
    "properties": [
     {
      "name": "name",
      "value": "DescriptionBody",
      "type": "Id"
     },
     {
      "name": "height",
      "value": "",
      "type": "Integer"
     },
     {
      "name": "backgroundColor",
      "value": "",
      "type": "Color"
     },
     {
      "name": "roundCorners",
      "value": "",
      "type": "RoundCorners"
     },
     {
      "name": "cssClass",
      "value": "",
      "type": "String"
     },
     {
      "name": "textAlign",
      "value": "",
      "type": "TextAlign"
     }
    ]
   },
   {
    "id": "46e27ef7-a339-d5fb-0d0f-728bdaec0476",
    "type": "LayoutHtml",
    "typeDesc": "Html",
    "parent": "2d99f333-9735-6b03-85d5-93d4a0142d07",
    "properties": [
     {
      "name": "name",
      "value": "",
      "type": "Id"
     },
     {
      "name": "html",
      "value": "<p>AddIns are CDF's extension points. Can be used in any component to be able to fine-control\nthat component and extend it in a very simple way</p>\n\n<p>The use case for this concept is TableComponent's colType. Tables are a fundamental piece of \ndashboards / visualizations and there needs to be simple ways to extend the ways they are rendered</p>\n\n\n<div class=\"WDh2\">AddIn Implementation</div>\n\n<p>\n\nIn order to implement an AddIn, you need to create an object like the following:\n\n<blockquote><pre>\n  var sparkline = {\n    name: \"sparkline\",\n    label: \"Sparkline\",\n    defaults: {\n      type: 'line'\n    },\n    implementation: function (tgt, st, opt) {\n      var t = $(tgt);\n      t.sparkline(st.value.split(/,/),opt);\n      t.removeClass(\"sparkline\");\n    }\n  };\n\nDashboards.registerAddIn(\"Table\", \"colType\", new AddIn(sparkline));\n</blockquote></pre>\n\n<i>name</i>, <i>label</i>, <i>defaults</i> and <i>implementation</i> are the important bits\nhere. This specific code is an implementation of a sparkline using the jquery plugin. \n</p>\n\n\n<div class=\"WDh2\">Setting options</div>\n\n<p>\nOptions are passed on a per component basis, usually in the component's preExecution function.\nIt can either be a static list of options that will be merged with the defaults or a function\nwhere the options change according to the state\n\n<blockquote><pre>\nfunction f(){\n \n    // Option 1 :Static list\n\n    this.setAddInOptions(\"colType\",\"sparkline\",{barColor: \"red\"});\n \n    // option 2: function\n    this.setAddInOptions(\"colType\",\"sparkline\",function(state){\n        // Let's turn the second sparkline into a bar\n        if(state.colIdx == \"2\"){\n            return { type:'bar'};\n        }\n    });\n}\n</blockquote></pre>\n</p>\n\n\n<div class=\"WDh2\">Setting defaults</div>\n\n<p>\nIt's also possible to ser a site-wide / dashboard wide defaults, and like the previous\noption, can either be a static list or a function\n\n<blockquote><pre>\nDashboards.setAddInDefaults(\"Table\",\"colType\",\"sparkline\",{fillColor:\"#aaa\"});\n\nDashboards.setAddInDefaults(\"Table\",\"colType\",\"sparkline\",function(state){ \n    return state.rowIdx%2?{fillColor:\"#aaa\"}:{fillColor:\"#fff\"};\n});\n\n\n</blockquote></pre>\n</p>\n\n\n<div class=\"WDh2\">Implementation arguments</div>\n\n<p>\n<i>implementation</i> function has the following arguments:\n\n<blockquote><pre>\n    implementation: function (tgt, st, opt) {}\n</blockquote></pre>\n\n<dl>\n    <dt>tgt</dt>\n    <dd>target - Target for the action. eg: On a cellType, it will be the td cell </dt>\n    \n    <dt>state</dt>\n    <dd>state - Information about the specific addin call. On a cellType will be an object\n    with: <i>{rawData, tableData, colIdx, rowIdx, series, category, value, colFormat}</i> </dt>\n\n    <dt>opt</dt>\n    <dd>options passed to this addIn</dt>\n    \n</dl>\n\n</p>\n\n<div class=\"WDh2\">Calling AddIns from components</div>\n\n<p>\n\nWhen developing a component, it's very easy to define a new AddIn type. Here's the example\nthat TableComponent uses:\n\n<blockquote><pre>\n    var addIn = myself.getAddIn(\"colType\",colType);\n    addIn.call(td,state,myself.getAddInOptions(\"colType\",addIn.getName()));\n</blockquote></pre>\n\nFrom this point on, there will be a new <i>colType</i> available to register \n\n</p>\n\n ",
      "type": "Html"
     },
     {
      "name": "color",
      "value": "",
      "type": "Color"
     },
     {
      "name": "fontSize",
      "value": "",
      "type": "Integer"
     },
     {
      "name": "cssClass",
      "value": "",
      "type": "String"
     }
    ]
   },
   {
    "id": "3373d2ed-9187-cecd-8cae-44ebdcf70ce5",
    "type": "LayoutRow",
    "typeDesc": "Row",
    "parent": "UnIqEiD",
    "properties": [
     {
      "name": "name",
      "value": "SupportedAddinsTitle",
      "type": "Id"
     },
     {
      "name": "height",
      "value": "",
      "type": "Integer"
     },
     {
      "name": "backgroundColor",
      "value": "",
      "type": "Color"
     },
     {
      "name": "roundCorners",
      "value": "",
      "type": "RoundCorners"
     },
     {
      "name": "cssClass",
      "value": "WDh1",
      "type": "String"
     },
     {
      "name": "textAlign",
      "value": "",
      "type": "TextAlign"
     }
    ]
   },
   {
    "id": "410cd2fc-be4b-8d1b-c83a-016744d39a9c",
    "type": "LayoutHtml",
    "typeDesc": "Html",
    "parent": "3373d2ed-9187-cecd-8cae-44ebdcf70ce5",
    "properties": [
     {
      "name": "name",
      "value": "",
      "type": "Id"
     },
     {
      "name": "html",
      "value": "Supported AddIns - Table \"colType\" ",
      "type": "Html"
     },
     {
      "name": "color",
      "value": "",
      "type": "Color"
     },
     {
      "name": "fontSize",
      "value": "",
      "type": "Integer"
     },
     {
      "name": "cssClass",
      "value": "",
      "type": "String"
     }
    ]
   },
   {
    "id": "b9afdccd-d812-3d05-e922-8d96f0f39411",
    "type": "LayoutRow",
    "typeDesc": "Row",
    "parent": "UnIqEiD",
    "properties": [
     {
      "name": "name",
      "value": "SparklineTitle",
      "type": "Id"
     },
     {
      "name": "height",
      "value": "",
      "type": "Integer"
     },
     {
      "name": "backgroundColor",
      "value": "",
      "type": "Color"
     },
     {
      "name": "roundCorners",
      "value": "",
      "type": "RoundCorners"
     },
     {
      "name": "cssClass",
      "value": "WDdataCellHeader",
      "type": "String"
     },
     {
      "name": "textAlign",
      "value": "",
      "type": "TextAlign"
     }
    ]
   },
   {
    "id": "b3705ed9-c519-d1f9-8a37-b520af3742ca",
    "type": "LayoutHtml",
    "typeDesc": "Html",
    "parent": "b9afdccd-d812-3d05-e922-8d96f0f39411",
    "properties": [
     {
      "name": "name",
      "value": "",
      "type": "Id"
     },
     {
      "name": "html",
      "value": "sparkline ",
      "type": "Html"
     },
     {
      "name": "color",
      "value": "",
      "type": "Color"
     },
     {
      "name": "fontSize",
      "value": "",
      "type": "Integer"
     },
     {
      "name": "cssClass",
      "value": "",
      "type": "String"
     }
    ]
   },
   {
    "id": "c2b51a60-0d9d-491d-e46f-2a2bf806920e",
    "type": "LayoutRow",
    "typeDesc": "Row",
    "parent": "UnIqEiD",
    "properties": [
     {
      "name": "name",
      "value": "SparklineBody",
      "type": "Id"
     },
     {
      "name": "height",
      "value": "",
      "type": "Integer"
     },
     {
      "name": "backgroundColor",
      "value": "",
      "type": "Color"
     },
     {
      "name": "roundCorners",
      "value": "",
      "type": "RoundCorners"
     },
     {
      "name": "cssClass",
      "value": "WDdataCellBody",
      "type": "String"
     },
     {
      "name": "textAlign",
      "value": "",
      "type": "TextAlign"
     }
    ]
   },
   {
    "id": "100379ee-749c-6807-e780-83f2aa5d6a79",
    "type": "LayoutColumn",
    "typeDesc": "Column",
    "parent": "c2b51a60-0d9d-491d-e46f-2a2bf806920e",
    "properties": [
     {
      "name": "name",
      "value": "SparklineDesc",
      "type": "Id"
     },
     {
      "name": "columnSpan",
      "value": "22",
      "type": "Integer"
     },
     {
      "name": "columnPrepend",
      "value": "1",
      "type": "Integer"
     },
     {
      "name": "columnAppend",
      "value": "1",
      "type": "Integer"
     },
     {
      "name": "columnPrependTop",
      "value": "false",
      "type": "Boolean"
     },
     {
      "name": "columnAppendBottom",
      "value": "false",
      "type": "Boolean"
     },
     {
      "name": "columnBorder",
      "value": "false",
      "type": "Boolean"
     },
     {
      "name": "columnBigBorder",
      "value": "false",
      "type": "Boolean"
     },
     {
      "name": "backgroundColor",
      "value": "",
      "type": "Color"
     },
     {
      "name": "roundCorners",
      "value": "",
      "type": "RoundCorners"
     },
     {
      "name": "height",
      "value": "",
      "type": "Integer"
     },
     {
      "name": "cssClass",
      "value": "",
      "type": "String"
     },
     {
      "name": "textAlign",
      "value": "",
      "type": "TextAlign"
     }
    ]
   },
   {
    "id": "beb3d1ff-2ad9-4492-c12c-076fd30efc24",
    "type": "LayoutRow",
    "typeDesc": "Row",
    "parent": "100379ee-749c-6807-e780-83f2aa5d6a79",
    "properties": [
     {
      "name": "name",
      "value": "SparklineDescHtml",
      "type": "Id"
     },
     {
      "name": "height",
      "value": "",
      "type": "Integer"
     },
     {
      "name": "backgroundColor",
      "value": "",
      "type": "Color"
     },
     {
      "name": "roundCorners",
      "value": "",
      "type": "RoundCorners"
     },
     {
      "name": "cssClass",
      "value": "",
      "type": "String"
     },
     {
      "name": "textAlign",
      "value": "",
      "type": "TextAlign"
     }
    ]
   },
   {
    "id": "93803b56-0c3f-b074-276c-8852b2c2086a",
    "type": "LayoutHtml",
    "typeDesc": "Html",
    "parent": "beb3d1ff-2ad9-4492-c12c-076fd30efc24",
    "properties": [
     {
      "name": "name",
      "value": "",
      "type": "Id"
     },
     {
      "name": "html",
      "value": "<i>sparkline</i> is an implementation of the \n<a href=\"http://www.omnipotent.net/jquery.sparkline/\" target=\"_blank\">JQuery Sparkline plugin</a>.\nCheck this page for full reference.\n\n <div class=\"WDh2\">Data Structure</div>\n \n <p>\n    It expects a CVS column with numbers, eg: 12,34.2,23,45\n </p>\n \n <div class=\"WDh2\">Defaults</div>\n \n <p>\n <blockquote><pre>\n     defaults: {\n      type: 'line'\n    }     \n </pre></blockquote>\n </p>\n\n  <div class=\"WDh2\">Sample</div>\n  \n <p>\n This sample contains 2 columns, a default one and one with specific options: {type:'bar'}\n \n </p>\n \n </p> ",
      "type": "Html"
     },
     {
      "name": "color",
      "value": "",
      "type": "Color"
     },
     {
      "name": "fontSize",
      "value": "",
      "type": "Integer"
     },
     {
      "name": "cssClass",
      "value": "",
      "type": "String"
     }
    ]
   },
   {
    "id": "6f234863-6533-d299-394c-986b3dcf478f",
    "type": "LayoutRow",
    "typeDesc": "Row",
    "parent": "100379ee-749c-6807-e780-83f2aa5d6a79",
    "properties": [
     {
      "name": "name",
      "value": "SparklineObj",
      "type": "Id"
     },
     {
      "name": "height",
      "value": "",
      "type": "Integer"
     },
     {
      "name": "backgroundColor",
      "value": "",
      "type": "Color"
     },
     {
      "name": "roundCorners",
      "value": "",
      "type": "RoundCorners"
     },
     {
      "name": "cssClass",
      "value": "",
      "type": "String"
     },
     {
      "name": "textAlign",
      "value": "",
      "type": "TextAlign"
     }
    ]
   },
   {
    "id": "a0878970-4172-9e14-2db0-163c7ce1ddda",
    "type": "LayoutRow",
    "typeDesc": "Row",
    "parent": "UnIqEiD",
    "properties": [
     {
      "name": "name",
      "value": "",
      "type": "Id"
     },
     {
      "name": "height",
      "value": "",
      "type": "Integer"
     },
     {
      "name": "backgroundColor",
      "value": "",
      "type": "Color"
     },
     {
      "name": "roundCorners",
      "value": "",
      "type": "RoundCorners"
     },
     {
      "name": "cssClass",
      "value": "",
      "type": "String"
     },
     {
      "name": "textAlign",
      "value": "",
      "type": "TextAlign"
     }
    ]
   },
   {
    "id": "990ede07-ed94-952a-28dd-a8f5d0c997d4",
    "type": "LayoutColumn",
    "typeDesc": "Column",
    "parent": "a0878970-4172-9e14-2db0-163c7ce1ddda",
    "properties": [
     {
      "name": "name",
      "value": "table",
      "type": "Id"
     },
     {
      "name": "columnSpan",
      "value": "24",
      "type": "Integer"
     },
     {
      "name": "columnPrepend",
      "value": "",
      "type": "Integer"
     },
     {
      "name": "columnAppend",
      "value": "",
      "type": "Integer"
     },
     {
      "name": "columnPrependTop",
      "value": "false",
      "type": "Boolean"
     },
     {
      "name": "columnAppendBottom",
      "value": "false",
      "type": "Boolean"
     },
     {
      "name": "columnBorder",
      "value": "false",
      "type": "Boolean"
     },
     {
      "name": "columnBigBorder",
      "value": "false",
      "type": "Boolean"
     },
     {
      "name": "backgroundColor",
      "value": "",
      "type": "Color"
     },
     {
      "name": "roundCorners",
      "value": "",
      "type": "RoundCorners"
     },
     {
      "name": "height",
      "value": "",
      "type": "Integer"
     },
     {
      "name": "cssClass",
      "value": "",
      "type": "String"
     },
     {
      "name": "textAlign",
      "value": "",
      "type": "TextAlign"
     }
    ]
   },
   {
    "id": "fa84398f-2f49-51bb-48d0-0bc20f716fd0",
    "type": "LayoutRow",
    "typeDesc": "Row",
    "parent": "UnIqEiD",
    "properties": [
     {
      "name": "name",
      "value": "",
      "type": "Id"
     },
     {
      "name": "height",
      "value": "",
      "type": "Integer"
     },
     {
      "name": "backgroundColor",
      "value": "",
      "type": "Color"
     },
     {
      "name": "roundCorners",
      "value": "",
      "type": "RoundCorners"
     },
     {
      "name": "cssClass",
      "value": "",
      "type": "String"
     },
     {
      "name": "textAlign",
      "value": "",
      "type": "TextAlign"
     }
    ]
   },
   {
    "id": "c5f4e490-612a-7cd0-e7c0-077e21636b27",
    "type": "LayoutColumn",
    "typeDesc": "Column",
    "parent": "fa84398f-2f49-51bb-48d0-0bc20f716fd0",
    "properties": [
     {
      "name": "name",
      "value": "auto",
      "type": "Id"
     },
     {
      "name": "columnSpan",
      "value": 5,
      "type": "Integer"
     },
     {
      "name": "columnPrepend",
      "value": "",
      "type": "Integer"
     },
     {
      "name": "columnAppend",
      "value": "",
      "type": "Integer"
     },
     {
      "name": "columnPrependTop",
      "value": "false",
      "type": "Boolean"
     },
     {
      "name": "columnAppendBottom",
      "value": "false",
      "type": "Boolean"
     },
     {
      "name": "columnBorder",
      "value": "false",
      "type": "Boolean"
     },
     {
      "name": "columnBigBorder",
      "value": "false",
      "type": "Boolean"
     },
     {
      "name": "backgroundColor",
      "value": "",
      "type": "Color"
     },
     {
      "name": "roundCorners",
      "value": "",
      "type": "RoundCorners"
     },
     {
      "name": "height",
      "value": "",
      "type": "Integer"
     },
     {
      "name": "cssClass",
      "value": "",
      "type": "String"
     },
     {
      "name": "textAlign",
      "value": "",
      "type": "TextAlign"
     }
    ]
   }
  ]
 },
 "components": {
  "rows": [
   {
    "id": "OTHERCOMPONENTS",
    "name": "Others",
    "type": "Label",
    "typeDesc": "<i>Group</i>",
    "parent": "UnIqEiD",
    "properties": [
     {
      "name": "Group",
      "value": "Others",
      "type": "Label"
     }
    ]
   },
   {
    "id": "54724e13-c9c6-dda8-9003-066d793bd89e",
    "type": "ComponentsTable",
    "typeDesc": "table Component",
    "parent": "OTHERCOMPONENTS",
    "properties": [
     {
      "name": "name",
      "value": "table",
      "type": "Id"
     },
     {
      "name": "htmlObject",
      "value": "table",
      "type": "HtmlObject"
     },
     {
      "name": "listeners",
      "value": "[]",
      "type": "Listeners"
     },
     {
      "name": "xActionArrayParameter",
      "value": "[]",
      "type": "ValuesArray"
     },
     {
      "name": "dataSource",
      "type": "Datasource",
      "value": "test"
     },
     {
      "name": "cccClickAction",
      "value": "",
      "type": "JavaScript"
     },
     {
      "name": "colHeaders",
      "value": "[\"Product\",\"Value\",\"Trend\",\"Trend 2\",\"protovis sparkline\",\"Sparkline\",\"Spark Bar\",\"Spark Pie?\",\"Or Bullet Line?\"]",
      "type": "Array"
     },
     {
      "name": "colTypes",
      "value": "[\"string\",\"number\",\"trendArrow\",\"trendArrow\",\"pvSparkline\",\"sparkline\",\"sparkline\",\"sparkline\",\"sparkline\"]",
      "type": "Array"
     },
     {
      "name": "colFormats",
      "value": "[null,\"%0.0f%%\",\"%.2f%%\",\"%.1f &euro;\"]",
      "type": "Array"
     },
     {
      "name": "colWidths",
      "value": "[\"140\",\"30\",\"50\",\"50\",\"50\",\"50\",\"50\",\"50\"]",
      "type": "Array"
     },
     {
      "name": "colSortable",
      "value": "[]",
      "type": "Array"
     },
     {
      "name": "colSearchable",
      "value": "[]",
      "type": "Array"
     },
     {
      "name": "paginate",
      "value": "true",
      "type": "Boolean"
     },
     {
      "name": "paginateServerside",
      "value": "true",
      "type": "Boolean"
     },
     {
      "name": "paginationType",
      "value": "two_button",
      "type": "PaginationType"
     },
     {
      "name": "filter",
      "value": "true",
      "type": "Boolean"
     },
     {
      "name": "info",
      "value": "true",
      "type": "Boolean"
     },
     {
      "name": "sort",
      "value": "true",
      "type": "Boolean"
     },
     {
      "name": "sortBy",
      "value": "[]",
      "type": "SortByArray"
     },
     {
      "name": "displayLength",
      "value": "",
      "type": "Integer"
     },
     {
      "name": "lengthChange",
      "value": "true",
      "type": "Boolean"
     },
     {
      "name": "tableStyle",
      "value": "themeroller",
      "type": "TableStyle"
     },
     {
      "name": "drawCallback",
      "value": "",
      "type": "JavaScript"
     },
     {
      "name": "sDom",
      "value": "",
      "type": "JavaScript"
     },
     {
      "name": "oLanguage",
      "value": "",
      "type": "JavaScript"
     },
     {
      "name": "executeAtStart",
      "value": "true",
      "type": "Boolean"
     },
     {
      "name": "preChange",
      "value": "",
      "type": "JavaScript"
     },
     {
      "name": "postChange",
      "value": "",
      "type": "JavaScript"
     },
     {
      "name": "postFetch",
      "value": "function(data) {\n    var labels = [\"Medicare\",\"Medicaid\",\"Managed Care\",\"Commercial Insurance\",\"Private\",\"Q-Mix\",\"Tricare\"];\n    var i = 0;\n    data.metadata = data.metadata.slice(0,9);\n    data.resultset = data.resultset.map(function(row) {\n      var values = row.slice(2,row.length);\n      r = row.slice(0,2);\n      r.push((Math.random() - 0.5) * 2);\n      r.push((Math.random() - 0.5) * 2);\n      r.push(values.join(','));\n      r.push(values.join(','));\n      var max = Math.max.apply(Math,values);\n      r.push(values.map(function(v){return v - max/2;}).join(','));\n      r.push(values.slice(0,3).join(','));\n      r.push([Math.random()*80+10,Math.random()*60+40,100,80,40].join(','));\n      r[0] = labels[i++];\n      return r\n    });\n    return data;\n}",
      "type": "JavaScript"
     },
     {
      "name": "preExecution",
      "value": "function() {\n \n    \n    var pvopts = {\n        width: 75\n    }\n    this.setAddInOptions(\"colType\",\"pvSparkline\",pvopts);\n    \n    function trendOpts(state) {\n        /* We have separate options for columns 2 and 3,\n         * so we have a function with a map from col idxs\n         * to options. Both of these display the value for\n         * the cell, and respect the column format as declared\n         * at the component level.\n         */\n        var opts = {\n          2:{\n            includeValue: true,\n            valueFormat: function(v,format) {\n              /* For column 2, we want to represent the absolute value\n               * for the change. Plain old text will do fine here.\n               */\n              return sprintf(format,Math.abs(v));\n            }\n          },\n          3: {\n            includeValue: true,\n            valueFormat: function(v,format) {\n            /* Column 3 will display the signed value, in either red or\n             * black, depending on whether the value is negative or positive.\n             * Since we need styling, we return an html string.\n             */\n              return \"<span style='color: \" + (v > 0 ? \"black\" : \"red\") + \"'>\" +\n                sprintf(format,v) +\n                \"</span>\";\n            }\n          }\n        };\n        return opts[state.colIdx];\n    }\n    this.setAddInOptions(\"colType\",\"trendArrow\",trendOpts);\n    \n    function sparkOpts(state) {\n      var opts = {\n        5: cols.sparkline,\n        6: cols.sparkbar,\n        7: cols.sparkpie,\n        8: cols.sparkbullet\n      };\n      return opts[state.colIdx];\n    }\n    this.setAddInOptions(\"colType\",\"sparkline\",sparkOpts);\n}",
      "type": "JavaScript"
     },
     {
      "name": "postExecution",
      "value": "",
      "type": "JavaScript"
     },
     {
      "name": "refreshPeriod",
      "value": "",
      "type": "Integer"
     },
     {
      "name": "tooltip",
      "value": "",
      "type": "Html"
     },
     {
      "name": "extraOptions",
      "value": "[]",
      "type": "OptionArray"
     },
     {
      "name": "expandParameters",
      "value": "[]",
      "type": "ValuesArray"
     },
     {
      "name": "expandOnClick",
      "value": "false",
      "type": "Boolean"
     },
     {
      "name": "expandContainerObject",
      "value": "",
      "type": "String"
     }
    ]
   },
   {
    "id": "dc7db903-05b3-a145-7757-8ec980d366d9",
    "type": "ComponentsTable",
    "typeDesc": "table Component",
    "parent": "OTHERCOMPONENTS",
    "properties": [
     {
      "name": "name",
      "value": "Sparkline1",
      "type": "Id"
     },
     {
      "name": "htmlObject",
      "value": "SparklineObj",
      "type": "HtmlObject"
     },
     {
      "name": "listeners",
      "value": "[]",
      "type": "Listeners"
     },
     {
      "name": "xActionArrayParameter",
      "value": "[]",
      "type": "ValuesArray"
     },
     {
      "name": "dataSource",
      "type": "Datasource",
      "value": "sparklineQuery"
     },
     {
      "name": "cccClickAction",
      "value": "",
      "type": "JavaScript"
     },
     {
      "name": "colHeaders",
      "value": "[]",
      "type": "Array"
     },
     {
      "name": "colTypes",
      "value": "[\"string\",\"sparkline\",\"sparkline\"]",
      "type": "Array"
     },
     {
      "name": "colFormats",
      "value": "[]",
      "type": "Array"
     },
     {
      "name": "colWidths",
      "value": "[]",
      "type": "Array"
     },
     {
      "name": "colSortable",
      "value": "[]",
      "type": "Array"
     },
     {
      "name": "colSearchable",
      "value": "[]",
      "type": "Array"
     },
     {
      "name": "paginate",
      "value": "false",
      "type": "Boolean"
     },
     {
      "name": "paginateServerside",
      "value": "false",
      "type": "Boolean"
     },
     {
      "name": "paginationType",
      "value": "two_button",
      "type": "PaginationType"
     },
     {
      "name": "filter",
      "value": "false",
      "type": "Boolean"
     },
     {
      "name": "info",
      "value": "false",
      "type": "Boolean"
     },
     {
      "name": "sort",
      "value": "false",
      "type": "Boolean"
     },
     {
      "name": "sortBy",
      "value": "[]",
      "type": "SortByArray"
     },
     {
      "name": "displayLength",
      "value": "",
      "type": "Integer"
     },
     {
      "name": "lengthChange",
      "value": "false",
      "type": "Boolean"
     },
     {
      "name": "tableStyle",
      "value": "classic",
      "type": "TableStyle"
     },
     {
      "name": "drawCallback",
      "value": "",
      "type": "JavaScript"
     },
     {
      "name": "sDom",
      "value": "",
      "type": "JavaScript"
     },
     {
      "name": "oLanguage",
      "value": "",
      "type": "JavaScript"
     },
     {
      "name": "executeAtStart",
      "value": "true",
      "type": "Boolean"
     },
     {
      "name": "preChange",
      "value": "",
      "type": "JavaScript"
     },
     {
      "name": "postChange",
      "value": "",
      "type": "JavaScript"
     },
     {
      "name": "postFetch",
      "value": "",
      "type": "JavaScript"
     },
     {
      "name": "preExecution",
      "value": "function f(){\n   \n    this.setAddInOptions(\"colType\",\"sparkline\",function(state){\n\n        // Let's turn the second sparkline into a bar\n        if(state.colIdx == \"2\"){\n            return {\n                type:'bar',\n                width: '250'\n            };\n        }\n    });\n}",
      "type": "JavaScript"
     },
     {
      "name": "postExecution",
      "value": "",
      "type": "JavaScript"
     },
     {
      "name": "refreshPeriod",
      "value": "",
      "type": "Integer"
     },
     {
      "name": "tooltip",
      "value": "",
      "type": "Html"
     },
     {
      "name": "extraOptions",
      "value": "[]",
      "type": "OptionArray"
     },
     {
      "name": "expandParameters",
      "value": "[]",
      "type": "ValuesArray"
     },
     {
      "name": "expandOnClick",
      "value": "false",
      "type": "Boolean"
     },
     {
      "name": "expandContainerObject",
      "value": "",
      "type": "String"
     }
    ]
   },
   {
    "id": "SCRIPT",
    "name": "Scripts",
    "type": "Label",
    "typeDesc": "<i>Group</i>",
    "parent": "UnIqEiD",
    "properties": [
     {
      "name": "Group",
      "value": "Scripts",
      "type": "Label"
     }
    ]
   },
   {
    "id": "39fa6209-f7ac-2336-72d6-e29f92fa137a",
    "type": "ComponentsFunction",
    "typeDesc": "Function",
    "parent": "SCRIPT",
    "properties": [
     {
      "name": "name",
      "value": "ColumnOptions",
      "type": "Id"
     },
     {
      "name": "javaScript",
      "value": "var cols = {\n  sparkline: {\n  /* Column  4 is a vanilla line chart sparkline, with\n   * a red dot marking the minimum value, and a green dot\n   * marking the maximum value.\n   */\n    width: 130,\n    height: 20,\n    lineColor: \"black\",\n    minSpotColor: \"#dd3333\",\n    maxSpotColor: \"#33dd33\"\n  },\n  sparkbar: {\n  /* Column  5 is a bar chart-like sparkline, with\n   * a black/red positive/negative values. For the sake\n   * of exploring what can be tweaked, its bars are really\n   * chunky, at 15px wide, and tightly packed, with a 0px gap.\n   */\n    width: 130,\n    height: 20,\n    barWidth:15,\n    type: 'bar',\n    barSpacing: 0,\n    barColor: \"black\",\n    negBarColor: \"red\"\n  },\n  sparkpie: {\n    type: 'pie',\n    sliceColors: [\"black\",\"magenta\",\"cyan\"]\n  },\n  sparkbullet: {\n    type:\"bullet\",\n    rangeColors: [\"green\", \"yellow\", \"red\"],\n    performanceColor: \"blue\",\n    targetColor: \"black\"\n  }\n}",
      "type": "JavaScript"
     }
    ]
   }
  ]
 },
 "datasources": {
  "rows": [
   {
    "id": "MDX",
    "name": "MDX Queries",
    "type": "Label",
    "typeDesc": "<i>Group</i>",
    "parent": "UnIqEiD",
    "properties": [
     {
      "name": "Group",
      "value": "MDX Queries",
      "type": "Label"
     }
    ]
   },
   {
    "id": "39bd4bbb-1793-c8d1-1f3b-34d3bb877f1f",
    "type": "Componentsmdx_mondrianJndi",
    "typeDesc": "mdx over mondrianJndi",
    "meta": "CDA",
    "meta_conntype": "mondrian.jndi",
    "meta_datype": "mdx",
    "parent": "MDX",
    "properties": [
     {
      "name": "name",
      "value": "test",
      "type": "Id"
     },
     {
      "name": "catalog",
      "value": "steel-wheels/analysis/steelwheels.mondrian.xml",
      "type": "MondrianCatalog"
     },
     {
      "name": "jndi",
      "value": "SampleData",
      "type": "Jndi"
     },
     {
      "name": "access",
      "value": "public",
      "type": "Access"
     },
     {
      "name": "parameters",
      "value": "[]",
      "type": "CdaParameters"
     },
     {
      "name": "output",
      "value": "[]",
      "type": "IndexArray"
     },
     {
      "name": "outputMode",
      "value": "include",
      "type": "OutputMode"
     },
     {
      "name": "cdacolumns",
      "value": "[]",
      "type": "CdaColumnsArray"
     },
     {
      "name": "cdacalculatedcolumns",
      "value": "[]",
      "type": "CdaCalculatedColumnsArray"
     },
     {
      "name": "query",
      "value": "select Descendants([Time],2) ON COLUMNS,\n  NON EMPTY [Product].Children ON ROWS\nfrom [SteelWheelsSales]\n",
      "type": "SqlQuery"
     },
     {
      "name": "cache",
      "value": "true",
      "type": "Boolean"
     },
     {
      "name": "cacheDuration",
      "value": 3600,
      "type": "Integer"
     },
     {
      "name": "bandedMode",
      "value": "compact",
      "type": "BandedMode"
     }
    ]
   },
   {
    "id": "SQL",
    "name": "SQL Queries",
    "type": "Label",
    "typeDesc": "<i>Group</i>",
    "parent": "UnIqEiD",
    "properties": [
     {
      "name": "Group",
      "value": "SQL Queries",
      "type": "Label"
     }
    ]
   },
   {
    "id": "78e482fa-8698-3d5e-7e51-24cea8871221",
    "type": "Componentssql_sqlJndi",
    "typeDesc": "sql over sqlJndi",
    "meta": "CDA",
    "meta_conntype": "sql.jndi",
    "meta_datype": "sql",
    "parent": "SQL",
    "properties": [
     {
      "name": "name",
      "value": "products",
      "type": "Id"
     },
     {
      "name": "jndi",
      "value": "SampleData",
      "type": "Jndi"
     },
     {
      "name": "access",
      "value": "public",
      "type": "Access"
     },
     {
      "name": "parameters",
      "value": "[[\"term\",\"\",\"String\",\"\"]]",
      "type": "CdaParameters"
     },
     {
      "name": "output",
      "value": "[]",
      "type": "IndexArray"
     },
     {
      "name": "outputMode",
      "value": "include",
      "type": "OutputMode"
     },
     {
      "name": "cdacolumns",
      "value": "[]",
      "type": "CdaColumnsArray"
     },
     {
      "name": "cdacalculatedcolumns",
      "value": "[]",
      "type": "CdaCalculatedColumnsArray"
     },
     {
      "name": "query",
      "value": "select distinct(productline) from products where products.productline like '%' + ${term}+'%' order by productline",
      "type": "SqlQuery"
     },
     {
      "name": "cache",
      "value": "true",
      "type": "Boolean"
     },
     {
      "name": "cacheDuration",
      "value": 3600,
      "type": "Integer"
     }
    ]
   },
   {
    "id": "SCRIPTING",
    "name": "SCRIPTING Queries",
    "type": "Label",
    "typeDesc": "<i>Group</i>",
    "parent": "UnIqEiD",
    "properties": [
     {
      "name": "Group",
      "value": "SCRIPTING Queries",
      "type": "Label"
     }
    ]
   },
   {
    "id": "9eafca94-5c8a-1d20-d12f-3824def5d116",
    "type": "Componentsscriptable_scripting",
    "typeDesc": "scriptable over scripting",
    "meta": "CDA",
    "meta_conntype": "scripting.scripting",
    "meta_datype": "scriptable",
    "parent": "SCRIPTING",
    "properties": [
     {
      "name": "name",
      "value": "sparklineQuery",
      "type": "Id"
     },
     {
      "name": "language",
      "value": "beanshell",
      "type": "String"
     },
     {
      "name": "initscript",
      "value": "",
      "type": "String"
     },
     {
      "name": "access",
      "value": "public",
      "type": "Access"
     },
     {
      "name": "parameters",
      "value": "[]",
      "type": "CdaParameters"
     },
     {
      "name": "output",
      "value": "[]",
      "type": "IndexArray"
     },
     {
      "name": "outputMode",
      "value": "include",
      "type": "OutputMode"
     },
     {
      "name": "cdacolumns",
      "value": "[]",
      "type": "CdaColumnsArray"
     },
     {
      "name": "cdacalculatedcolumns",
      "value": "[]",
      "type": "CdaCalculatedColumnsArray"
     },
     {
      "name": "query",
      "value": "import org.pentaho.reporting.engine.classic.core.util.TypedTableModel;\n\nString[] columnNames = new String[]{\n\"Name\",\n\"Default Sparkline\",\n\"Custom Sparkline\"\n};\n\n\nClass[] columnTypes = new Class[]{\nString.class\n,String.class\n,String.class\n};\n\nTypedTableModel model = new TypedTableModel(columnNames, columnTypes);\nmodel.addRow(new Object[]{ new String(\"Row 1\")\n,new String(\"37,40,30,23,50,23,14,15,17,25,33,23\")\n,new String(\"37,40,30,23,50,23,14,15,17,25,33,23\")\n});\n\n\nmodel.addRow(new Object[]{ new String(\"Row 1\")\n,new String(\"37,40,30,23,50,23,14,15,17,25,33,23\")\n,new String(\"37,40,30,23,50,23,14,15,17,25,33,23\")\n});\n\n\nreturn model;",
      "type": "SqlQuery"
     },
     {
      "name": "cache",
      "value": "true",
      "type": "Boolean"
     },
     {
      "name": "cacheDuration",
      "value": 3600,
      "type": "Integer"
     }
    ]
   }
  ]
 },
 "filename": "/cde_sample/tests/addIns.cdfde"
}